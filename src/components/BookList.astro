---
import { Book } from '../types'
import AddToCart from './AddToCart';

function formatCurrency(amount:number) {
    return new Intl.NumberFormat('en-us',{
        style: 'currency',
        currency: 'USD',
        // minimumFractionDigits: 2
    }).format(amount);
}

const result = await fetch('http://localhost:3001/books');

if(!result.ok){
    console.log(result);
} 

const bookList: Book[] = await result.json();

// To pass in props to the Astro component, a type with the name of "Props" need to be created, so it can be scanned by the Astro global Objects
type Props = {
    count?: number;
    addToCart?: boolean;
}

/* Count is infinity to display all the products/books 
Def Props => If the props are not passed count will be infinite & addToCart will be true

Which is why they are optional in typeDef(ln: 22)*/
const { count = Infinity, addToCart = true } = Astro.props;
---

<section class="buy-books">
    {
        // slice(0, count) 0 to next count number of the items
        bookList.slice(0, count).map((book: Book) => (
                <div class="book">
                    <img src={book.image.src} alt={book.image.alt} />
                    <h1>{book.title}</h1>
                    <p>{book.description}</p>
                    <p>{formatCurrency(book.price)}</p>
                    {/*This whole section would be static, except the AddToCart functionality */}
                    { addToCart && <AddToCart item={book} client:only="react" />}
                </div>
            )
        )
    }
</section>

<style>


.buy-books {
    display: flex;
    gap:1rem;
    flex-wrap: wrap;
    justify-content: center;
    margin: 1rem 0;
}

.book{
    flex: 1 1 24%;
    width: 250px;
}

.book img{
    aspect-ratio: 1;
    border-radius: 1.125rem;
    display: block;
    width: 100%;
}

.book h2{
    font-size: 1.125rem;
    margin: 0.75rem 0 0;
}

.book p{
    margin: 0.25rem 0 0;
}

</style>
